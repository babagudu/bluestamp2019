#include <PS2X_lib.h>
#include <LiquidCrystal.h>
PS2X ps2x;

//right now, the library does NOT support hot-pluggable controllers, meaning
//you must always either restart your Arduino after you connect the controller,
//or call config_gamepad(pins) again after connecting the controller.

int error = 0;
int EnA = 7;
int In1 = 6;
int In2 = 5;
int In3 = 4;
int In4 = 3;
int EnB = 2;
byte type = 0;
byte vibrate = 0;
LiquidCrystal lcd(8, 9, A5, A4, A3, A2); // Creates an LC object. Parameters: (rs, enable, d4, d5, d6, d7) 

void TurnOffMotor() {
  //Turning Motors OFF
 
  digitalWrite(EnA, LOW);
  digitalWrite(EnB, LOW);
  //Motor A
  digitalWrite(In1, LOW);
  digitalWrite(In2, LOW);
  //Motor B
  digitalWrite(In3, LOW);
  digitalWrite(In4, LOW);
}

void setup() {
  Serial.begin(9600);
  error = ps2x.config_gamepad(13,11,10,12, false, true);   //GamePad(clock, command, attention, data, Pressures?, Rumble?) 
  if(error == 0){
    Serial.println("Found Controller, configured successful");
    Serial.println("Try out all the buttons, X will vibrate the controller, faster as you press harder;");
    Serial.println("holding L1 or R1 will print out the analog stick values.");
    Serial.println("Go to www.billporter.info for updates and to report bugs.");
}
  else if (error == 1)
  Serial.println("No controller found, check wiring, see readme.txt to enable debug. visit www.billporter.info for troubleshooting tips");

  else if (error == 2)
    Serial.println("Controller found but not accepting commands. see readme.txt to enable debug. Visit www.billporter.info for troubleshooting tips");

  else if (error == 3)
    Serial.println("Controller refusing to enter Pressures mode, may not support it. ");

  type = ps2x.readType();
  switch (type) {
      Serial.println("Unknown Controller type");
      break;
    case 1:
      Serial.println("DualShock Controller Found");
      break;
    case 2:
      Serial.println("GuitarHero Controller Found");
      break;
  }
  // Code for LCD
  lcd.begin(16,2); // Initializes the interface to the LCD screen, and specifies the dimensions (width and height) of the display 
}

void loop() {
  /* You must Read Gamepad to get new values
    Read GamePad and set vibration values
    ps2x.read_gamepad(small motor on/off, larger motor strenght from 0-255)
    if you don't enable the rumble, use ps2x.read_gamepad(); with no values

    you should call this at least once a second
  */

  if (error == 1)
    return;

  if (type == 2) {

    ps2x.read_gamepad();          //read controller

    if (ps2x.ButtonPressed(GREEN_FRET))
      Serial.println("Green Fret Pressed");
    if (ps2x.ButtonPressed(RED_FRET))
      Serial.println("Red Fret Pressed");
    if (ps2x.ButtonPressed(YELLOW_FRET))
      Serial.println("Yellow Fret Pressed");
    if (ps2x.ButtonPressed(BLUE_FRET))
      Serial.println("Blue Fret Pressed");
    if (ps2x.ButtonPressed(ORANGE_FRET))
      Serial.println("Orange Fret Pressed");


    if (ps2x.ButtonPressed(STAR_POWER))
      Serial.println("Star Power Command");

    if (ps2x.Button(UP_STRUM))         //will be TRUE as long as button is pressed
      Serial.println("Up Strum");
    if (ps2x.Button(DOWN_STRUM))
      Serial.println("DOWN Strum");


    if (ps2x.Button(PSB_START))                  //will be TRUE as long as button is pressed
      Serial.println("Start is being held");
    if (ps2x.Button(PSB_SELECT))
      Serial.println("Select is being held");


    if (ps2x.Button(ORANGE_FRET)) // print stick value IF TRUE
    {
      Serial.print("Wammy Bar Position:");
      Serial.println(ps2x.Analog(WHAMMY_BAR), DEC);
    }
  }

  else { //DualShock Controller

    ps2x.read_gamepad(false, vibrate);          //read controller and set large motor to spin at 'vibrate' speed

    if (ps2x.Button(PSB_START))                  //will be TRUE as long as button is pressed
      Serial.println("Start is being held");
    if (ps2x.Button(PSB_SELECT))
      Serial.println("Select is being held");


    if (ps2x.Button(PSB_PAD_UP)) {        //will be TRUE as long as button is pressed
      Serial.print("Up held this hard: ");
      Serial.println(ps2x.Analog(PSAB_PAD_UP), DEC);
    }
    if (ps2x.Button(PSB_PAD_RIGHT)) {
      Serial.print("Right held this hard: ");
      Serial.println(ps2x.Analog(PSAB_PAD_RIGHT), DEC);
    }
    if (ps2x.Button(PSB_PAD_LEFT)) {
      Serial.println("LEFT held this hard: ");
      Serial.println(ps2x.Analog(PSAB_PAD_LEFT), DEC);
    }
    if (ps2x.Button(PSB_PAD_DOWN)) {
      Serial.print("DOWN held this hard: ");
      Serial.println(ps2x.Analog(PSAB_PAD_DOWN), DEC);
    }


    vibrate = ps2x.Analog(PSAB_BLUE);        //this will set the large motor vibrate speed based on
    //how hard you press the blue (X) button

    if (ps2x.NewButtonState())               //will be TRUE if any button changes state (on to off, or off to on)
    {
      if (ps2x.Button(PSB_L3))
        Serial.println("L3 pressed");
      if (ps2x.Button(PSB_R3))
        Serial.println("R3 pressed");
      if (ps2x.Button(PSB_L2))
        Serial.println("L2 pressed");
      if (ps2x.Button(PSB_R2))
        Serial.println("R2 pressed");
      if (ps2x.Button(PSB_GREEN))
        Serial.println("Triangle pressed");

    }

    
    //Going Forward
    
    if (ps2x.ButtonPressed(PSB_BLUE)){   // This is executed even if the button is NOT pressed.
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Baba is");
      lcd.setCursor(0, 1);     // Here I changed so the text is displayed on the next row.
      lcd.print("moving forward");
     
  }
  
    if (ps2x.ButtonPressed(PSB_BLUE)) {      //will be TRUE if button was JUST pressed
       
      //Turning Motors ON
      digitalWrite(EnA, HIGH);
      digitalWrite(EnB, HIGH);
      //Motor A 
      digitalWrite(In1, HIGH);
      digitalWrite(In2, LOW);
      //Motor B
      digitalWrite(In3, HIGH);
      digitalWrite(In4, LOW);

  }



    if (ps2x.ButtonReleased(PSB_BLUE)) {       //will be TRUE if button was JUST released
      TurnOffMotor();
    }

    //Going Backwards

    if (ps2x.ButtonPressed(PSB_GREEN)){   // This is executed even if the button is NOT pressed.
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Baba is");
      lcd.setCursor(0, 1);     // Here I changed so the text is displayed on the next row.
      lcd.print("moving backwards");
  }
    if (ps2x.ButtonPressed(PSB_GREEN)) {        //will be TRUE if button was JUST pressed OR released
      //Turning Motors ON
      digitalWrite(EnA, HIGH);
      digitalWrite(EnB, HIGH);
      //Motor A
      digitalWrite(In1, LOW);
      digitalWrite(In2, HIGH);
      //Motor B
      digitalWrite(In3, LOW);
      digitalWrite(In4, HIGH);
    }

    if (ps2x.ButtonReleased(PSB_GREEN)) {
      TurnOffMotor();
    }

    //Turning Left

   if (ps2x.ButtonPressed(PSB_RED)){   // This is executed even if the button is NOT pressed.
      lcd.clear();
      lcd.setCursor(0, 0);  
      lcd.print("Baba is");
      lcd.setCursor(0, 1);     // Here I changed so the text is displayed on the next row.
      lcd.print("turning left");
  }
    if (ps2x.ButtonPressed(PSB_RED)) {
      //Turning Motors ON
      digitalWrite(EnA, HIGH);
      digitalWrite(EnB, LOW);
      //Motor A
      digitalWrite(In1, LOW);
      digitalWrite(In2, HIGH);
      //Motor B
      digitalWrite(In3, LOW);
      digitalWrite(In4, HIGH);
    }

    if (ps2x.ButtonReleased(PSB_RED)) {
      TurnOffMotor();
    }

    //Turning Right

    if (ps2x.ButtonPressed(PSB_PINK)){   // This is executed even if the button is NOT pressed.
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Baba is");
      lcd.setCursor(0, 1);     // Here I changed so the text is displayed on the next row.
      lcd.print("turning right");
  }
    if (ps2x.ButtonPressed(PSB_PINK)) {
      
      //Turning Motors ON
      digitalWrite(EnA, LOW);
      digitalWrite(EnB, HIGH);
      //Motor A
      digitalWrite(In1, LOW);
      digitalWrite(In2, HIGH);
      //Motor B
      digitalWrite(In3, LOW);
      digitalWrite(In4, HIGH);
    }

    if (ps2x.ButtonReleased(PSB_PINK)) {
      TurnOffMotor();
    }



     if(ps2x.Button(PSB_L1) || ps2x.Button(PSB_R1)) // print stick values if either is TRUE
    {
        Serial.print("Stick Values:");
        Serial.print(ps2x.Analog(PSS_LY), DEC); //Left stick, Y axis. Other options: LX, RY, RX  
        Serial.print(",");
        Serial.print(ps2x.Analog(PSS_LX), DEC); 
        Serial.print(",");
        Serial.print(ps2x.Analog(PSS_RY), DEC); 
        Serial.print(",");
        Serial.println(ps2x.Analog(PSS_RX), DEC); 
    } 
    
    
 }
 
 
 delay(50);
     
}
